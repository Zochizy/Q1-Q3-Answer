import * as cdk from '@aws-cdk/core';
import * as ec2 from "@aws-cdk/aws-ec2";
import * as ecs from "@aws-cdk/aws-ecs";
import * as ecs_patterns from "@aws-cdk/aws-ecs-patterns";

export class cdkfargateStack extends cdk.Stack {
  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);
    
    // The code that defines your stack goes here
    const vpc = new ecs2.Vpc(this, "myVpc", {
    maxAzs: 3, natGateways: 1 });  //Default is all AZs in region
    
    const cluster = new ecs.Cluster(this, "ecscluster",{ 
    vpc: vpc 
   });

   const taskDefinition = new ecs.FargateTaskDefinition(this, "TaskDef");
   
   const container = taskDefinition.addContainer(“webcontainer”, {
   image: ecs.ContainerImage.fromRegistry(“amazon/amazon-ecs-sample”),
   memoryLimitMiB: 1024,
  });
   
   container.addPortMappings({containerPort: 80,});
   
   const fatgetService = new ecs.FargateService(this, "FargateService", {
   cluster,
   taskDefinition,
 });
 
  const lb = new elbv2.ApplicationLoadBalancer(this, "LB", {
  vpc,
  internetFacing: true,
 });
  const listener = lb.addListener("Listener", { port: 80 });
  listener.addTargets("ECS", {
  port: 80,
  targets: [fatgetService],
});

 




   
